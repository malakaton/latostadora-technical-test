<?php


declare(strict_types=1);

namespace App\Tests\Service;

use App\Entity\User\User;
use App\Repositories\User\UserRepository;
use App\Service\Login;
use PHPUnit\Framework\TestCase;
use Symfony\Component\HttpFoundation\Response;

final class LoginTest extends TestCase
{
    const EMAIL = 'user1@test.com';
    const PASSWORD = '12345';

    protected $userRepoMockery;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->userRepoMockery = \Mockery::mock(UserRepository::class);
    }

    public function testItWorks()
    {
        $this->userRepoMockery->shouldReceive('findByEmail')
            ->withArgs([self::EMAIL])
            ->andReturn(
                new User(self::EMAIL, self::PASSWORD)
            )
            ->once();

        $loginService = (new Login($this->userRepoMockery))->__invoke(self::EMAIL, self::PASSWORD);

        $this->assertEquals($loginService, Response::HTTP_OK);
    }

    public function testItNotFound()
    {
        $this->userRepoMockery->shouldReceive('findByEmail')
            ->withArgs(['fakemail@notexist.com'])
            ->andReturn(
                new User(null, null)
            )
            ->once();

        $loginService = (new Login($this->userRepoMockery))->__invoke('fakemail@notexist.com', self::PASSWORD);

        $this->assertEquals($loginService, Response::HTTP_NOT_FOUND);
    }

    public function testItLoginFail()
    {
        $this->userRepoMockery->shouldReceive('findByEmail')
            ->withArgs([self::EMAIL])
            ->andReturn(
                new User(self::EMAIL, self::PASSWORD)
            )
            ->once();

        $loginService = (new Login($this->userRepoMockery))->__invoke(self::EMAIL, 'badPassword');

        $this->assertEquals($loginService, Response::HTTP_UNAUTHORIZED);
    }
}
